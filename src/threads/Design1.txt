
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.
Jared Wolfe wolfejar@ksu.edu
Jie Zheng Jayie21@ksu.edu
Fubin Luan Fubin@ksu.edu


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

Citation(You might see unreadable code for our citation because it's Chinese web source):

Pintos-斯坦福大学操作系统Project详解-Project1. (n.d.). Retrieved from https://blog.csdn.net/u013058160/article/details/45393555

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
int64_t ticks_blocked;
}
This is an attribute which simply stores the total amount of ticks for which the 
thread should be blocked.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep() is called, the function first checks the ticks argument to ensure it is positive.  Then, an assertion 
checks the current setting for interrupts to ensure they are enabled. An enumeration of the old interrupt level is set to the 
value returned when using the intr_disable() function. This disables interrupts and returns an enum indicating what the 
interrupt level was set to before.  A pointer to a thread struct is created by calling thread_current(). This simply returns a 
struct representing the currently running thread.  We set the ticks_blocked attribute, which was created for this purpose, to 
the given number of ticks specified by the argument to the function. thread_block() is called, setting the status of the 
thread to blocked and calling schedule() wich decides upon the next thread to run. 

We add a call to thread_foreach() to the timer_interrupt() function, which is called on every
system tick.  A pointer to a new function, blocked_thread_check(), is the argument for this thread_foreach()
call.  blocked_thread_check() checks the current status and blocked ticks of the given thread in the argument.  
It decrements the ticks blocked as this is called on every tick, then checks if the ticks ==0, and unblocks
the thread accordingly.

After this is complete, we return to the next line after thread_block() in timer_sleep(). This sets the interrupt level
back to whatever it was before disabling interrupts for this function.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Some processing must be done within the interrupt handler in order to check for blocked threads.  This implementation iterates
through every thread, decrementing the blocked time if it is currently blocked.  This is less efficient than creating an 
ordered list of sleeping threads and stopping once reaching a thread which has not reached its wakeup time.  Currently, our 
solution runs in O(number of threads), which may be problematic depending on the number of total threads.  


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The call to thread_current() within timer_sleep() accounts for seperate calls to
the functions by different threads.  The thread_current() function includes assertions
to ensure the thread being returned is running.  thread_block() includes a call to schedule(), which now
ensures the current thread is not running before deciding which thread to run currently. Interrupts are also
ensured to be disabled in both of these methods. This ensures the blocking and context switching may complete
before another thread completes the same operations within timer_sleep().


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disabled upon entering the timer_sleep() method.  This ensures we can properly block the
thread and schedule the next thread to run.  This would lead to issues with proper scheduling if interrupts were enabled.
In the case where multiple threads call schedule(), interrupts would be disabled once the first thread reaches this function.
Since the schedule() functionality must ensure the previous thread is stopped and then start the next thread, it is critical 
thatthis functionality is not interrupted.  


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

This design was one of the most minimalistic designs possible, as it mostly takes advantage of existing functionality and only 
adds one new attribute to the thread struct.  The design is simple, as it simply checks blocked threads on every tick and 
decrements the remaining blocked time. Another design which was considered involved creating a queue of blocked threads from 
scratch, and including details about why each thread was blocked (sleeping, etc.).  This solution was more complex than 
utilizing the thread_foreach() function iterates through all threads and calls the function which we pass in.  This design is 
simple to understand, adds minimal extra code, and utilizes existing functionality.


              PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added the following members to struct thread
	int base_priority
	- This is to record the base priority when there are multiple threads occurring in main the thread
	struct list locks
	- Locks that the thread is holding
	struct lock *lock_waiting
	- The lock that the thread is waiting for. The acquired lock that thread is trying to acquire.

We added the following members to struct lock:
  struct list_elem elem
  - a list where we store our priority donation
  int max_prioriy
  - Max priority among the threads acquiring the lock

>> B2: Explain the data structure used to track priority donation.
  - We're using list data structure to store priority donation of threads in the program.
  We used a list to keep in track of donations when multiple donations occurs.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

In a situation where there's no lock, semaphore, or condition variable, whichever thread that has higher
 priority will first executes. When one of those three situations do occur, the thread with higher priority
 will donate its priority to the thread it's competing with lower priority. The lower priority thread will take
 the higher-priority thread's priority to execute lower-priority thread's work and return higher-priority thread's
  priority back hi-priority thread after the lower-priority  thread is done by either release lock, sema_down, or etc.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

1) First we check if there's an existing holder for the lock and not thread_mlfqs
2) If there is existing lock holder, we record the lock for waiting
3) Then, we use a while loop with condition that there's a lock and the lock's priority is lower than
the current thread's priority, then it will replace the lock's maximum priority to current thread's and donate
the current thread's priority to the lock holder.
4) After the while loop, we'll down the semaphore if there's a semaphore condition.
5) We disable the interrupt and set the current holder of lock to current thread.

We used the while loop in lock_acquire() to achieve the priority donation and handle nested donation.
The step 3 above has details of implementation.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

1) First we check thread_mlfqs whether it's true or false. If it's false, we call
thread_remove_lock function to remove the lock from method argument.
2) For our lock removing process, we first disable interrupt.
3) We remove the lock's priority donation.
4) We update the current thread's priority back.

In the situation of a lock that a higher-priority thread is waiting for, we will bring back the
higher-priority thread's priority after we remove the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

if there were bunch of threads there waiting to set new priority got from multiple donation. those donation's
difference can be a bad thing for threads been donated to check which donation has the most priority. which might
cause a race problem. to avoid this, we put extra code inside thread_set_priority() we check if the priority was
big enough to replace current. I think we can use a lock to avoid it, but we need more structure inside thread to
keep track of how the current lock's priority is.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The other design we considered was higher priority always goes execute first, which could cause thread starvation. Therefore,
our design is better because it processes the lower-priority thread first as long as it acquires the priority condition first.



              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

